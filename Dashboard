{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jayapp19/jayaharus-bisacoding/blob/main/Copy_of_Welcome_To_Colaboratory.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -q streamlit\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import streamlit as st\n",
        "from babel.numbers import format_currency\n",
        "\n",
        "sns.set(style='dark')\n",
        "\n",
        "day_df = pd.read_csv(\"Dashboard/day.csv\")\n",
        "hour_df = pd.read_csv(\"Dashboard/hour.csv\")\n",
        "day_df.head()\n",
        "hour_df.head()\n",
        "\n",
        "\n",
        "# Mengubah nama judul kolom pada day.csv dan hour.csv\n",
        "day_df.rename(columns={'dteday':'date', 'yr':'year', 'mnth':'month', 'weekday':'day', 'weathersit':'weather',\n",
        "                    'temp':'temperature', 'atemp':'temperature_feel', 'hum':'humidity', 'casual':'casual_user',\n",
        "                    'registered':'registered_user', 'cnt':'total_user'}, inplace=True)\n",
        "hour_df.rename(columns={'dteday':'date', 'yr':'year', 'mnth':'month', 'hr':'hour', 'weekday':'day',\n",
        "                    'weathersit':'weather', 'temp':'temperature', 'atemp':'temperature_feel',\n",
        "                    'hum':'humidity', 'casual':'casual_user', 'registered':'registered_user', 'cnt':'total_user'}, inplace=True)\n",
        "# Mengubah value pada day_df\n",
        "def change_season(x):\n",
        "    if x == 1:\n",
        "        return 'Springer'\n",
        "    elif x == 2:\n",
        "        return 'Summer'\n",
        "    elif x == 3:\n",
        "        return 'Fall'\n",
        "    else:\n",
        "        return 'Winter'\n",
        "day_df['season'] = day_df['season'].apply(change_season)\n",
        "\n",
        "def change_year(x):\n",
        "    if x == 0:\n",
        "        return 2011\n",
        "    else:\n",
        "        return 2012\n",
        "day_df['year'] = day_df['year'].apply(change_year)\n",
        "\n",
        "month_change = {1: 'January', 2: 'February', 3: 'March', 4:'April', 5:'May', 6:'June', 7:'July',\n",
        "                8:'August', 9:'September', 10:'October', 11:'November', 12:'December'}\n",
        "day_df['month'] = day_df['month'].map(month_change)\n",
        "\n",
        "day_change = {0: 'Sunday', 1: 'Monday', 2: 'Tuesday', 3:'Wednesday', 4:'Thursday', 5:'Friday', 6:'Saturday'}\n",
        "day_df['day'] = day_df['day'].map(day_change)\n",
        "\n",
        "def change_workingday(x):\n",
        "    if x == 0:\n",
        "        return 'weekend/holiday'\n",
        "    else:\n",
        "        return 'working day'\n",
        "day_df['workingday'] = day_df['workingday'].apply(change_workingday)\n",
        "\n",
        "def change_weather(x):\n",
        "    if x == 1:\n",
        "        return 'Clear'\n",
        "    elif x == 2:\n",
        "        return 'Mist'\n",
        "    elif x == 3:\n",
        "        return 'Light Snow'\n",
        "    else:\n",
        "        return 'Heavy Rain'\n",
        "day_df['weather'] = day_df['weather'].apply(change_weather)\n",
        "\n",
        "# Mengubah value pada hour_df\n",
        "def change_season(x):\n",
        "    if x == 1:\n",
        "        return 'Springer'\n",
        "    elif x == 2:\n",
        "        return 'Summer'\n",
        "    elif x == 3:\n",
        "        return 'Fall'\n",
        "    else:\n",
        "        return 'Winter'\n",
        "\n",
        "hour_df['season'] = hour_df['season'].apply(change_season)\n",
        "def change_year(x):\n",
        "    if x == 0:\n",
        "        return 2011\n",
        "    else:\n",
        "        return 2012\n",
        "\n",
        "hour_df['year'] = hour_df['year'].apply(change_year)\n",
        "month_change = {1: 'January', 2: 'February', 3: 'March', 4:'April', 5:'May', 6:'June', 7:'July',\n",
        "                8:'August', 9:'September', 10:'October', 11:'November', 12:'December'}\n",
        "\n",
        "hour_df['month'] = hour_df['month'].map(month_change)\n",
        "day_change = {0: 'Sunday', 1: 'Monday', 2: 'Tuesday', 3:'Wednesday', 4:'Thursday', 5:'Friday', 6:'Saturday'}\n",
        "\n",
        "hour_df['day'] = hour_df['day'].map(day_change)\n",
        "def change_workingday(x):\n",
        "    if x == 0:\n",
        "        return 'weekend/holiday'\n",
        "    else:\n",
        "        return 'working day'\n",
        "\n",
        "hour_df['workingday'] = hour_df['workingday'].apply(change_workingday)\n",
        "def change_weather(x):\n",
        "    if x == 1:\n",
        "        return 'Clear'\n",
        "    elif x == 2:\n",
        "        return 'Mist'\n",
        "    elif x == 3:\n",
        "        return 'Light Snow'\n",
        "    else:\n",
        "        return 'Heavy Rain'\n",
        "\n",
        "hour_df['weather'] = hour_df['weather'].apply(change_weather)\n",
        "\n",
        "# Helper functions\n",
        "\n",
        "def create_daily_orders_df(df):\n",
        "    orders_df = df.groupby(df['date'].dt.to_period(\"M\")).sum(numeric_only=False).reset_index()\n",
        "    return orders_df\n",
        "\n",
        "def create_sum_casual_user_df(df):\n",
        "    sum_casual_user_df = df.groupby(\"day\").casual_user.sum().sort_values(ascending=False).reset_index()\n",
        "    return sum_casual_user_df\n",
        "\n",
        "def create_sum_registered_user_df(df):\n",
        "    sum_registered_user_df = df.groupby(\"day\").registered_user.sum().sort_values(ascending=False).reset_index()\n",
        "    return sum_registered_user_df\n",
        "\n",
        "def create_byweather_df(df):\n",
        "    byweather_df = df.groupby(\"weather\").total_user.sum().sort_values(ascending=False).reset_index()\n",
        "    return byweather_df\n",
        "\n",
        "def create_byseason_df(df):\n",
        "    byseason_df = df.groupby(\"season\").total_user.sum().sort_values(ascending=False).reset_index()\n",
        "    return byseason_df\n",
        "\n",
        "def create_rfm_df(df):\n",
        "    rfm_df = day_df.groupby(by=\"day\", as_index=False).agg({\n",
        "        \"date\": \"max\",\n",
        "        \"instant\": \"nunique\",\n",
        "        \"total_user\": \"sum\"\n",
        "    })\n",
        "    rfm_df.columns = [\"day\", \"max_order_timestamp\", \"frequency\", \"monetary\"]\n",
        "    rfm_df[\"max_order_timestamp\"] = rfm_df[\"max_order_timestamp\"].dt.date\n",
        "    recent_date = day_df[\"date\"].dt.date.max()\n",
        "    rfm_df[\"recency\"] = rfm_df[\"max_order_timestamp\"].apply(lambda x: (recent_date - x).days)\n",
        "    rfm_df.drop(\"max_order_timestamp\", axis=1, inplace=True)\n",
        "    return rfm_df\n",
        "\n",
        "# Ensure the date column are of type datetime\n",
        "datetime_columns = [\"date\"]\n",
        "day_df.sort_values(by=\"date\", inplace=True)\n",
        "day_df.reset_index(inplace=True)\n",
        "for column in datetime_columns:\n",
        "    day_df[column] = pd.to_datetime(day_df[column])\n",
        "\n",
        "# Create filter components\n",
        "min_date = day_df[\"date\"].min()\n",
        "max_date = day_df[\"date\"].max()\n",
        "\n",
        "with st.sidebar:\n",
        "    # Adding a company logo\n",
        "    st.image(\"Dashboard/logo.png\")\n",
        "\n",
        "    # Retrieve start_date & end_date from date_input\n",
        "    start_date, end_date = st.date_input(\n",
        "        label='Range of Time', min_value=min_date,\n",
        "        max_value=max_date,\n",
        "        value=[min_date, max_date]\n",
        "    )\n",
        "\n",
        "main_df = day_df[(day_df[\"date\"] >= str(start_date)) &\n",
        "                (day_df[\"date\"] <= str(end_date))]\n",
        "\n",
        "daily_orders_df = create_daily_orders_df(main_df)\n",
        "sum_casual_user_df = create_sum_casual_user_df(main_df)\n",
        "sum_registered_user_df = create_sum_registered_user_df(main_df)\n",
        "byweather_df = create_byweather_df(main_df)\n",
        "byseason_df = create_byseason_df(main_df)\n",
        "rfm_df = create_rfm_df(main_df)\n",
        "\n",
        "# Create dashboard\n",
        "st.header('Capital Bike Share Dashboard :sparkles:')\n",
        "\n",
        "# Daily Users\n",
        "st.subheader('Daily Users')\n",
        "col1, col2, col3 = st.columns(3)\n",
        "\n",
        "with col1:\n",
        "    total_casual = daily_orders_df.casual_user.sum()\n",
        "    st.metric(\"Total Casual User\", value=f'{total_casual:,}')\n",
        "\n",
        "with col2:\n",
        "    total_registered = daily_orders_df.registered_user.sum()\n",
        "    st.metric(\"Total Registered User\", value=f'{total_registered:,}')\n",
        "\n",
        "with col3:\n",
        "    total_users = daily_orders_df.total_user.sum()\n",
        "    st.metric(\"Total Users\", value=f'{total_users:,}')\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(daily_orders_df.index, daily_orders_df['total_user'], color='#A5C0DD')\n",
        "plt.xlabel(None)\n",
        "plt.ylabel(None)\n",
        "plt.title('Number of Users')\n",
        "plt.xticks(rotation=45)\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "st.pyplot(plt)\n",
        "\n",
        "# Number of Casual Users and Registered Users by Day\n",
        "st.subheader(\"Number of Casual Users and Registered Users by Day\")\n",
        "fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(35, 15))\n",
        "colors = [\"#72BCD4\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\"]\n",
        "\n",
        "sns.barplot(x=\"casual_user\", y=\"day\", data=sum_casual_user_df, palette=colors, hue=\"day\", ax=ax[0])\n",
        "ax[0].set_ylabel(None)\n",
        "ax[0].set_xlabel(None)\n",
        "ax[0].set_title(\"Casual User\", loc=\"center\", fontsize=50)\n",
        "ax[0].tick_params(axis ='y', labelsize=30)\n",
        "ax[0].tick_params(axis ='x', labelsize=30, rotation=45)\n",
        "\n",
        "sns.barplot(x=\"registered_user\", y=\"day\", data=sum_registered_user_df, palette=colors, hue=\"day\", ax=ax[1])\n",
        "ax[1].set_ylabel(None)\n",
        "ax[1].set_xlabel(None)\n",
        "ax[1].invert_xaxis()\n",
        "ax[1].yaxis.set_label_position(\"right\")\n",
        "ax[1].yaxis.tick_right()\n",
        "ax[1].set_title(\"Registered User\", loc=\"center\", fontsize=50)\n",
        "ax[1].tick_params(axis='y', labelsize=30)\n",
        "ax[1].tick_params(axis ='x', labelsize=30, rotation=-45)\n",
        "\n",
        "st.pyplot(fig)\n",
        "\n",
        "# The Effect of Weather and Season on Bike Sharing Productivity\n",
        "st.subheader(\"Number of Users by Weather and Season\")\n",
        "fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(35, 15))\n",
        "sns.barplot(y=\"total_user\", x=\"weather\", data=byweather_df.sort_values(by=\"total_user\", ascending=False), palette=colors, hue=\"weather\", ax=ax[0])\n",
        "ax[0].set_title(\"Number of User by Weather\", loc=\"center\", fontsize=50)\n",
        "ax[0].set_ylabel(None)\n",
        "ax[0].set_xlabel(None)\n",
        "ax[0].tick_params(axis ='y', labelsize=30)\n",
        "ax[0].tick_params(axis ='x', labelsize=30)\n",
        "ax[0].ticklabel_format(style='plain', axis='y')\n",
        "\n",
        "sns.barplot(y=\"total_user\", x=\"season\", data=byseason_df.sort_values(by=\"total_user\", ascending=False), palette=colors, hue=\"season\", ax=ax[1])\n",
        "ax[1].set_title(\"Number of User by Season\", loc=\"center\", fontsize=50)\n",
        "ax[1].set_ylabel(None)\n",
        "ax[1].set_xlabel(None)\n",
        "ax[1].invert_xaxis()\n",
        "ax[1].yaxis.set_label_position(\"right\")\n",
        "ax[1].yaxis.tick_right()\n",
        "ax[1].tick_params(axis='y', labelsize=30)\n",
        "ax[1].tick_params(axis ='x', labelsize=30)\n",
        "ax[1].ticklabel_format(style='plain', axis='y')\n",
        "\n",
        "st.pyplot(fig)\n",
        "\n",
        "# RFM Analysis\n",
        "st.subheader(\"Best Customer Based on RFM Parameters (day)\")\n",
        "col1, col2, col3 = st.columns(3)\n",
        "\n",
        "with col1:\n",
        "    avg_recency = round(rfm_df.recency.mean(), 1)\n",
        "    st.metric(\"Average Recency (days)\", value=avg_recency)\n",
        "\n",
        "with col2:\n",
        "    avg_frequency = round(rfm_df.frequency.mean(), 2)\n",
        "    st.metric(\"Average Frequency\", value=avg_frequency)\n",
        "\n",
        "with col3:\n",
        "    avg_frequency = format_currency(rfm_df.monetary.mean(), \"AUD\", locale='es_CO')\n",
        "    st.metric(\"Average Monetary\", value=avg_frequency)\n",
        "\n",
        "fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(35, 15))\n",
        "colors = [\"#90CAF9\", \"#90CAF9\", \"#90CAF9\", \"#90CAF9\", \"#90CAF9\"]\n",
        "\n",
        "sns.barplot(y=\"recency\", x=\"day\", data=rfm_df.sort_values(by=\"recency\", ascending=True).head(5), palette=colors, hue=\"day\", ax=ax[0])\n",
        "ax[0].set_ylabel(None)\n",
        "ax[0].set_xlabel(None)\n",
        "ax[0].set_title(\"By Recency (days)\", loc=\"center\", fontsize=50)\n",
        "ax[0].tick_params(axis='y', labelsize=25)\n",
        "ax[0].tick_params(axis ='x', labelsize=30, rotation=45)\n",
        "\n",
        "sns.barplot(y=\"frequency\", x=\"day\", data=rfm_df.sort_values(by=\"frequency\", ascending=False).head(5), palette=colors, hue=\"day\", ax=ax[1])\n",
        "ax[1].set_ylabel(None)\n",
        "ax[1].set_xlabel(None)\n",
        "ax[1].set_title(\"By Frequency\", loc=\"center\", fontsize=50)\n",
        "ax[1].tick_params(axis='y', labelsize=25)\n",
        "ax[1].tick_params(axis='x', labelsize=30, rotation=45)\n",
        "\n",
        "sns.barplot(y=\"monetary\", x=\"day\", data=rfm_df.sort_values(by=\"monetary\", ascending=False).head(5), palette=colors, hue=\"day\", ax=ax[2])\n",
        "ax[2].set_ylabel(None)\n",
        "ax[2].set_xlabel(None)\n",
        "ax[2].set_title(\"By Monetary\", loc=\"center\", fontsize=50)\n",
        "ax[2].tick_params(axis='y', labelsize=25)\n",
        "ax[2].tick_params(axis='x', labelsize=30, rotation=45)\n",
        "\n",
        "st.pyplot(fig)\n",
        "\n",
        "st.caption(f\"Copyright © 2023 All Rights Reserved [Jayasari Pakpahan](https://www.linkedin.com/in/jayasari-pakpahan-804095151/)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y2bMZ-VE4cvH",
        "outputId": "8cbd7a0c-3269-426e-9dbe-4a4cc46aa995"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-22-8f4fdb273da7>:115: FutureWarning: Dropping invalid columns in DataFrameGroupBy.sum is deprecated. In a future version, a TypeError will be raised. Before calling .sum, select only columns which should be valid for the function.\n",
            "  orders_df = df.groupby(df['date'].dt.to_period(\"M\")).sum(numeric_only=False).reset_index()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DeltaGenerator()"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
